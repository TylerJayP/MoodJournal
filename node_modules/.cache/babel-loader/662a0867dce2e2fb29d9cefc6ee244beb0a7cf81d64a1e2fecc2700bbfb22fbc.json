{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\JournalV2\\\\src\\\\context\\\\JournalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Updated JournalContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JournalContext = /*#__PURE__*/createContext();\nexport const useJournal = () => {\n  _s();\n  return useContext(JournalContext);\n};\n_s(useJournal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const JournalProvider = ({\n  children\n}) => {\n  _s2();\n  const [entries, setEntries] = useState([]);\n  const {\n    user\n  } = useAuth();\n\n  // Get user-specific storage key - wrapped in useCallback to preserve reference\n  const getUserStorageKey = useCallback(() => {\n    if (!user || !user.username) return null;\n    return `journalEntries_${user.username}`;\n  }, [user]);\n\n  // Load entries from localStorage on initial render or when user changes\n  useEffect(() => {\n    const loadEntries = () => {\n      const storageKey = getUserStorageKey();\n      if (!storageKey) {\n        setEntries([]);\n        return;\n      }\n      const storedEntries = localStorage.getItem(storageKey);\n      if (storedEntries) {\n        // This is an existing user with entries, load them\n        setEntries(JSON.parse(storedEntries));\n      } else {\n        // This is either a new user or a user with no entries\n        // Initialize with an empty array instead of a default entry\n        setEntries([]);\n        // Save the empty array to localStorage to mark that we've initialized this user\n        localStorage.setItem(storageKey, JSON.stringify([]));\n      }\n    };\n    loadEntries();\n  }, [getUserStorageKey]); // Add getUserStorageKey to the dependency array\n\n  // Save entries to localStorage whenever they change\n  useEffect(() => {\n    const saveEntries = () => {\n      const storageKey = getUserStorageKey();\n      if (!storageKey) return;\n      localStorage.setItem(storageKey, JSON.stringify(entries));\n    };\n    saveEntries();\n  }, [entries, getUserStorageKey]); // Add getUserStorageKey to the dependency array\n\n  // Get a single entry by ID\n  const getEntry = id => {\n    return entries.find(entry => entry.id === id);\n  };\n\n  // Create a new entry\n  const createEntry = () => {\n    // First, clean up any untitled, empty entries\n    cleanupEmptyEntries();\n    const newEntry = {\n      id: uuidv4(),\n      name: user ? user.displayName || user.username : '',\n      moods: [],\n      // Change from 'mood' to 'moods' array\n      title: '',\n      description: '',\n      gratitude: '',\n      photo: null,\n      photoCaption: '',\n      date: new Date().toISOString().split('T')[0]\n    };\n    setEntries(prevEntries => [newEntry, ...prevEntries]);\n    return newEntry;\n  };\n\n  // Update an existing entry\n  const updateEntry = updatedEntry => {\n    setEntries(prevEntries => prevEntries.map(entry => entry.id === updatedEntry.id ? updatedEntry : entry));\n  };\n  const cleanupEmptyEntries = () => {\n    setEntries(prevEntries => prevEntries.filter(entry => entry.title.trim() !== '' || entry.description.trim() !== ''));\n  };\n\n  // Delete an entry\n  const deleteEntry = id => {\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\n  };\n\n  // Get mood statistics\n  const getMoodStats = () => {\n    // Count occurrences of each mood\n    const moodCounts = {};\n    let totalMoodInstances = 0;\n    entries.forEach(entry => {\n      // Handle both old entries with mood (string) and new entries with moods (array)\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : entry.mood ? [entry.mood] : [];\n      moodsArray.forEach(mood => {\n        if (mood) {\n          moodCounts[mood] = (moodCounts[mood] || 0) + 1;\n          totalMoodInstances++;\n        }\n      });\n    });\n\n    // Get mood count by date (for last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const moodsByDate = [];\n    entries.filter(entry => new Date(entry.date) >= thirtyDaysAgo).forEach(entry => {\n      // Handle both old entries with mood (string) and new entries with moods (array)\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : entry.mood ? [entry.mood] : [];\n      moodsArray.forEach(mood => {\n        if (mood) {\n          moodsByDate.push({\n            date: entry.date,\n            mood: mood\n          });\n        }\n      });\n    });\n\n    // Sort by date\n    moodsByDate.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n    // Most frequent mood\n    let mostFrequentMood = 'None';\n    let maxCount = 0;\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      if (count > maxCount) {\n        mostFrequentMood = mood;\n        maxCount = count;\n      }\n    });\n    return {\n      moodCounts,\n      moodsByDate,\n      mostFrequentMood,\n      totalEntries: entries.length,\n      totalMoodInstances,\n      uniqueMoods: Object.keys(moodCounts).length\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(JournalContext.Provider, {\n    value: {\n      entries,\n      getEntry,\n      createEntry,\n      updateEntry,\n      deleteEntry,\n      getMoodStats,\n      cleanupEmptyEntries // ADDED: Export the cleanup function\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s2(JournalProvider, \"XNFprGnSWhdIDXs6FcLOOb1Cyxc=\", false, function () {\n  return [useAuth];\n});\n_c = JournalProvider;\nvar _c;\n$RefreshReg$(_c, \"JournalProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","v4","uuidv4","useAuth","jsxDEV","_jsxDEV","JournalContext","useJournal","_s","JournalProvider","children","_s2","entries","setEntries","user","getUserStorageKey","username","loadEntries","storageKey","storedEntries","localStorage","getItem","JSON","parse","setItem","stringify","saveEntries","getEntry","id","find","entry","createEntry","cleanupEmptyEntries","newEntry","name","displayName","moods","title","description","gratitude","photo","photoCaption","date","Date","toISOString","split","prevEntries","updateEntry","updatedEntry","map","filter","trim","deleteEntry","getMoodStats","moodCounts","totalMoodInstances","forEach","moodsArray","Array","isArray","mood","thirtyDaysAgo","setDate","getDate","moodsByDate","push","sort","a","b","mostFrequentMood","maxCount","Object","count","totalEntries","length","uniqueMoods","keys","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/JournalV2/src/context/JournalContext.js"],"sourcesContent":["// Updated JournalContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAuth } from './AuthContext';\n\nconst JournalContext = createContext();\n\nexport const useJournal = () => useContext(JournalContext);\n\nexport const JournalProvider = ({ children }) => {\n  const [entries, setEntries] = useState([]);\n  const { user } = useAuth();\n  \n  // Get user-specific storage key - wrapped in useCallback to preserve reference\n  const getUserStorageKey = useCallback(() => {\n    if (!user || !user.username) return null;\n    return `journalEntries_${user.username}`;\n  }, [user]);\n  \n  // Load entries from localStorage on initial render or when user changes\n  useEffect(() => {\n    const loadEntries = () => {\n      const storageKey = getUserStorageKey();\n      if (!storageKey) {\n        setEntries([]);\n        return;\n      }\n      \n      const storedEntries = localStorage.getItem(storageKey);\n      if (storedEntries) {\n        // This is an existing user with entries, load them\n        setEntries(JSON.parse(storedEntries));\n      } else {\n        // This is either a new user or a user with no entries\n        // Initialize with an empty array instead of a default entry\n        setEntries([]);\n        // Save the empty array to localStorage to mark that we've initialized this user\n        localStorage.setItem(storageKey, JSON.stringify([]));\n      }\n    };\n    \n    loadEntries();\n  }, [getUserStorageKey]); // Add getUserStorageKey to the dependency array\n    \n  // Save entries to localStorage whenever they change\n  useEffect(() => {\n    const saveEntries = () => {\n      const storageKey = getUserStorageKey();\n      if (!storageKey) return;\n      \n      localStorage.setItem(storageKey, JSON.stringify(entries));\n    };\n    \n    saveEntries();\n  }, [entries, getUserStorageKey]); // Add getUserStorageKey to the dependency array\n    \n  // Get a single entry by ID\n  const getEntry = (id) => {\n    return entries.find(entry => entry.id === id);\n  };\n    \n// Create a new entry\nconst createEntry = () => {\n  // First, clean up any untitled, empty entries\n  cleanupEmptyEntries();\n  \n  const newEntry = {\n    id: uuidv4(),\n    name: user ? (user.displayName || user.username) : '',\n    moods: [], // Change from 'mood' to 'moods' array\n    title: '',\n    description: '',\n    gratitude: '',\n    photo: null,\n    photoCaption: '',\n    date: new Date().toISOString().split('T')[0]\n  };\n    \n  setEntries(prevEntries => [newEntry, ...prevEntries]);\n  return newEntry;\n};\n    \n  // Update an existing entry\n  const updateEntry = (updatedEntry) => {\n    setEntries(prevEntries => \n      prevEntries.map(entry => \n        entry.id === updatedEntry.id ? updatedEntry : entry\n      )\n    );\n  };\n\n    const cleanupEmptyEntries = () => {\n    setEntries(prevEntries => \n      prevEntries.filter(entry => \n        entry.title.trim() !== '' || entry.description.trim() !== ''\n      )\n    );\n  };\n    \n  // Delete an entry\n  const deleteEntry = (id) => {\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\n  };\n    \n// Get mood statistics\nconst getMoodStats = () => {\n  // Count occurrences of each mood\n  const moodCounts = {};\n  let totalMoodInstances = 0;\n  \n  entries.forEach(entry => {\n    // Handle both old entries with mood (string) and new entries with moods (array)\n    const moodsArray = Array.isArray(entry.moods) ? entry.moods : (entry.mood ? [entry.mood] : []);\n    \n    moodsArray.forEach(mood => {\n      if (mood) {\n        moodCounts[mood] = (moodCounts[mood] || 0) + 1;\n        totalMoodInstances++;\n      }\n    });\n  });\n  \n  // Get mood count by date (for last 30 days)\n  const thirtyDaysAgo = new Date();\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n  \n  const moodsByDate = [];\n  entries\n    .filter(entry => new Date(entry.date) >= thirtyDaysAgo)\n    .forEach(entry => {\n      // Handle both old entries with mood (string) and new entries with moods (array)\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : (entry.mood ? [entry.mood] : []);\n      \n      moodsArray.forEach(mood => {\n        if (mood) {\n          moodsByDate.push({\n            date: entry.date,\n            mood: mood\n          });\n        }\n      });\n    });\n\n  // Sort by date\n  moodsByDate.sort((a, b) => new Date(a.date) - new Date(b.date));\n  \n  // Most frequent mood\n  let mostFrequentMood = 'None';\n  let maxCount = 0;\n  \n  Object.entries(moodCounts).forEach(([mood, count]) => {\n    if (count > maxCount) {\n      mostFrequentMood = mood;\n      maxCount = count;\n    }\n  });\n  \n  return {\n    moodCounts,\n    moodsByDate,\n    mostFrequentMood,\n    totalEntries: entries.length,\n    totalMoodInstances,\n    uniqueMoods: Object.keys(moodCounts).length\n  };\n};\n    \n  return (\n    <JournalContext.Provider value={{\n      entries,\n      getEntry,\n      createEntry,\n      updateEntry,\n      deleteEntry,\n      getMoodStats,\n      cleanupEmptyEntries // ADDED: Export the cleanup function\n    }}>\n      {children}\n    </JournalContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}