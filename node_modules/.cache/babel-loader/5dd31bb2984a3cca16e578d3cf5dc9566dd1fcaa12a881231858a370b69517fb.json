{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\JournalV2\\\\src\\\\context\\\\JournalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JournalContext = /*#__PURE__*/createContext();\nexport const useJournal = () => {\n  _s();\n  return useContext(JournalContext);\n};\n_s(useJournal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const JournalProvider = ({\n  children\n}) => {\n  _s2();\n  const [entries, setEntries] = useState([]);\n\n  // Load entries from localStorage on initial render\n  useEffect(() => {\n    const storedEntries = localStorage.getItem('journalEntries');\n    if (storedEntries) {\n      setEntries(JSON.parse(storedEntries));\n    }\n  }, []);\n\n  // Save entries to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('journalEntries', JSON.stringify(entries));\n  }, [entries]);\n\n  // Get a single entry by ID\n  const getEntry = id => {\n    return entries.find(entry => entry.id === id);\n  };\n\n  // Create a new entry\n  const createEntry = () => {\n    const newEntry = {\n      id: uuidv4(),\n      name: '',\n      mood: '',\n      title: '',\n      description: '',\n      gratitude: '',\n      // Add gratitude field\n      date: new Date().toISOString().split('T')[0]\n    };\n    setEntries(prevEntries => [newEntry, ...prevEntries]);\n    return newEntry;\n  };\n\n  // Update an existing entry\n  const updateEntry = updatedEntry => {\n    setEntries(prevEntries => prevEntries.map(entry => entry.id === updatedEntry.id ? updatedEntry : entry));\n  };\n\n  // Delete an entry\n  const deleteEntry = id => {\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\n  };\n\n  // Get mood statistics\n  const getMoodStats = () => {\n    // Count occurrences of each mood\n    const moodCounts = entries.reduce((acc, entry) => {\n      if (entry.mood) {\n        acc[entry.mood] = (acc[entry.mood] || 0) + 1;\n      }\n      return acc;\n    }, {});\n\n    // Get mood count by date (for last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const moodsByDate = entries.filter(entry => new Date(entry.date) >= thirtyDaysAgo).sort((a, b) => new Date(a.date) - new Date(b.date)).map(entry => ({\n      date: entry.date,\n      mood: entry.mood || 'Unspecified'\n    }));\n\n    // Most frequent mood\n    let mostFrequentMood = 'None';\n    let maxCount = 0;\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      if (count > maxCount) {\n        mostFrequentMood = mood;\n        maxCount = count;\n      }\n    });\n    return {\n      moodCounts,\n      moodsByDate,\n      mostFrequentMood,\n      totalEntries: entries.length\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(JournalContext.Provider, {\n    value: {\n      entries,\n      getEntry,\n      createEntry,\n      updateEntry,\n      deleteEntry,\n      getMoodStats\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s2(JournalProvider, \"kxIb9gqRsPiq5Cfs/hnSaj1BNA4=\");\n_c = JournalProvider;\nvar _c;\n$RefreshReg$(_c, \"JournalProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","v4","uuidv4","jsxDEV","_jsxDEV","JournalContext","useJournal","_s","JournalProvider","children","_s2","entries","setEntries","storedEntries","localStorage","getItem","JSON","parse","setItem","stringify","getEntry","id","find","entry","createEntry","newEntry","name","mood","title","description","gratitude","date","Date","toISOString","split","prevEntries","updateEntry","updatedEntry","map","deleteEntry","filter","getMoodStats","moodCounts","reduce","acc","thirtyDaysAgo","setDate","getDate","moodsByDate","sort","a","b","mostFrequentMood","maxCount","Object","forEach","count","totalEntries","length","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/JournalV2/src/context/JournalContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst JournalContext = createContext();\n\nexport const useJournal = () => useContext(JournalContext);\n\nexport const JournalProvider = ({ children }) => {\n  const [entries, setEntries] = useState([]);\n  \n  // Load entries from localStorage on initial render\n  useEffect(() => {\n    const storedEntries = localStorage.getItem('journalEntries');\n    if (storedEntries) {\n      setEntries(JSON.parse(storedEntries));\n    }\n  }, []);\n  \n  // Save entries to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('journalEntries', JSON.stringify(entries));\n  }, [entries]);\n  \n  // Get a single entry by ID\n  const getEntry = (id) => {\n    return entries.find(entry => entry.id === id);\n  };\n  \n  // Create a new entry\n  const createEntry = () => {\n    const newEntry = {\n      id: uuidv4(),\n      name: '',\n      mood: '',\n      title: '',\n      description: '',\n      gratitude: '', // Add gratitude field\n      date: new Date().toISOString().split('T')[0]\n    };\n    \n    setEntries(prevEntries => [newEntry, ...prevEntries]);\n    return newEntry;\n  };\n  \n  // Update an existing entry\n  const updateEntry = (updatedEntry) => {\n    setEntries(prevEntries => \n      prevEntries.map(entry => \n        entry.id === updatedEntry.id ? updatedEntry : entry\n      )\n    );\n  };\n  \n  // Delete an entry\n  const deleteEntry = (id) => {\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\n  };\n  \n  // Get mood statistics\n  const getMoodStats = () => {\n    // Count occurrences of each mood\n    const moodCounts = entries.reduce((acc, entry) => {\n      if (entry.mood) {\n        acc[entry.mood] = (acc[entry.mood] || 0) + 1;\n      }\n      return acc;\n    }, {});\n    \n    // Get mood count by date (for last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const moodsByDate = entries\n      .filter(entry => new Date(entry.date) >= thirtyDaysAgo)\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n      .map(entry => ({\n        date: entry.date,\n        mood: entry.mood || 'Unspecified'\n      }));\n    \n    // Most frequent mood\n    let mostFrequentMood = 'None';\n    let maxCount = 0;\n    \n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      if (count > maxCount) {\n        mostFrequentMood = mood;\n        maxCount = count;\n      }\n    });\n    \n    return {\n      moodCounts,\n      moodsByDate,\n      mostFrequentMood,\n      totalEntries: entries.length\n    };\n  };\n  \n  return (\n    <JournalContext.Provider value={{\n      entries,\n      getEntry,\n      createEntry,\n      updateEntry,\n      deleteEntry,\n      getMoodStats\n    }}>\n      {children}\n    </JournalContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}