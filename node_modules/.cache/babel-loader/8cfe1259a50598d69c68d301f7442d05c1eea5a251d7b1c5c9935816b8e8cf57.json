{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\JournalV2\\\\src\\\\components\\\\MoodCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodCalendar = ({\n  entries,\n  moodColors\n}) => {\n  _s();\n  const [calendarData, setCalendarData] = useState([]);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [currentView, setCurrentView] = useState('month');\n\n  // Generate calendar data when the component mounts or entries change\n  useEffect(() => {\n    generateCalendarData();\n  }, [entries, currentDate, currentView]);\n\n  // Generate the calendar grid data\n  const generateCalendarData = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n\n    // Get the first day of the month\n    const firstDay = new Date(year, month, 1);\n    // Get the last day of the month\n    const lastDay = new Date(year, month + 1, 0);\n\n    // Get the day of the week the first day falls on (0 = Sunday, 6 = Saturday)\n    const firstDayIndex = firstDay.getDay();\n\n    // Total days in month\n    const daysInMonth = lastDay.getDate();\n\n    // Total days to display (including empty cells from previous/next months)\n    const days = [];\n\n    // Add empty cells for days from the previous month\n    for (let i = 0; i < firstDayIndex; i++) {\n      const prevMonthLastDay = new Date(year, month, 0).getDate();\n      const day = prevMonthLastDay - firstDayIndex + i + 1;\n      days.push({\n        day,\n        date: new Date(year, month - 1, day),\n        isCurrentMonth: false,\n        entries: []\n      });\n    }\n\n    // Add cells for current month\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = new Date(year, month, i);\n      const dateStr = date.toISOString().split('T')[0];\n\n      // Find journal entries for this date\n      const dayEntries = entries.filter(entry => entry.date === dateStr);\n      days.push({\n        day: i,\n        date,\n        isCurrentMonth: true,\n        entries: dayEntries\n      });\n    }\n\n    // Calculate how many days from the next month need to be added\n    // We want a total of 42 cells (6 weeks) in the calendar\n    const remainingDays = 42 - days.length;\n\n    // Add cells for the next month\n    for (let i = 1; i <= remainingDays; i++) {\n      days.push({\n        day: i,\n        date: new Date(year, month + 1, i),\n        isCurrentMonth: false,\n        entries: []\n      });\n    }\n    setCalendarData(days);\n  };\n\n  // Navigate to the previous month\n  const goToPreviousMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));\n  };\n\n  // Navigate to the next month\n  const goToNextMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));\n  };\n\n  // Go to today\n  const goToToday = () => {\n    setCurrentDate(new Date());\n  };\n\n  // Format date as Month YYYY\n  const formatMonthYear = date => {\n    return date.toLocaleDateString('en-US', {\n      month: 'long',\n      year: 'numeric'\n    });\n  };\n\n  // Get the dominant mood for a day (the most frequent one)\n  const getDominantMood = dayEntries => {\n    if (!dayEntries || dayEntries.length === 0) {\n      return null;\n    }\n\n    // Count occurrences of each mood\n    const moodCounts = {};\n    dayEntries.forEach(entry => {\n      // Handle both old entries with mood (string) and new entries with moods (array)\n      const moods = Array.isArray(entry.moods) ? entry.moods : entry.mood ? [entry.mood] : [];\n      moods.forEach(mood => {\n        moodCounts[mood] = (moodCounts[mood] || 0) + 1;\n      });\n    });\n\n    // Find the mood with the highest count\n    let dominantMood = null;\n    let maxCount = 0;\n    Object.entries(moodCounts).forEach(([mood, count]) => {\n      if (count > maxCount) {\n        dominantMood = mood;\n        maxCount = count;\n      }\n    });\n    return dominantMood;\n  };\n\n  // Get the mood color for a day\n  const getMoodColor = dayEntries => {\n    const dominantMood = getDominantMood(dayEntries);\n    if (!dominantMood) {\n      return null;\n    }\n    return moodColors[dominantMood] || '#bdc3c7';\n  };\n\n  // Get a lighter version of a color for hover effects\n  const getLighterColor = hexColor => {\n    // If no color provided, return a light gray\n    if (!hexColor) return '#f5f5f5';\n\n    // Convert hex to RGB\n    let r = parseInt(hexColor.slice(1, 3), 16);\n    let g = parseInt(hexColor.slice(3, 5), 16);\n    let b = parseInt(hexColor.slice(5, 7), 16);\n\n    // Lighten by mixing with white\n    r = Math.floor(r * 0.7 + 255 * 0.3);\n    g = Math.floor(g * 0.7 + 255 * 0.3);\n    b = Math.floor(b * 0.7 + 255 * 0.3);\n\n    // Convert back to hex\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  };\n\n  // Render entries count for a day\n  const renderEntryCount = entries => {\n    if (!entries || entries.length === 0) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-entry-count\",\n      children: entries.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render mood indicators for a day\n  const renderMoodIndicators = entries => {\n    if (!entries || entries.length === 0) {\n      return null;\n    }\n\n    // Get all unique moods from entries\n    const allMoods = new Set();\n    entries.forEach(entry => {\n      // Handle both old entries with mood (string) and new entries with moods (array)\n      const moods = Array.isArray(entry.moods) ? entry.moods : entry.mood ? [entry.mood] : [];\n      moods.forEach(mood => {\n        allMoods.add(mood);\n      });\n    });\n    const moodList = Array.from(allMoods).slice(0, 3); // Show max 3 moods\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-mood-indicators\",\n      children: [moodList.map((mood, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-mood-dot\",\n        style: {\n          backgroundColor: moodColors[mood] || '#bdc3c7'\n        },\n        title: mood\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)), allMoods.size > 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-mood-more\",\n        children: [\"+\", allMoods.size - 3]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Format date for tooltip/aria-label\n  const formatDate = date => {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  // Check if a date is today\n  const isToday = date => {\n    const today = new Date();\n    return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"calendar-nav-button\",\n          onClick: goToPreviousMonth,\n          \"aria-label\": \"Previous Month\",\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"calendar-title\",\n          children: formatMonthYear(currentDate)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"calendar-nav-button\",\n          onClick: goToNextMonth,\n          \"aria-label\": \"Next Month\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"today-button\",\n        onClick: goToToday,\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-weekdays\",\n        children: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-weekday\",\n          children: day\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-days\",\n        children: calendarData.map((day, index) => {\n          const moodColor = getMoodColor(day.entries);\n          const bgColor = day.isCurrentMonth && moodColor ? moodColor : day.isCurrentMonth ? '#ffffff' : '#f5f5f5';\n          const lighterColor = getLighterColor(bgColor);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `calendar-day ${day.isCurrentMonth ? 'current-month' : 'other-month'} ${isToday(day.date) ? 'today' : ''}`,\n            style: {\n              backgroundColor: day.isCurrentMonth && moodColor ? lighterColor : '',\n              borderLeft: day.isCurrentMonth && moodColor ? `4px solid ${moodColor}` : ''\n            },\n            \"aria-label\": formatDate(day.date),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendar-day-number\",\n              children: day.day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this), renderEntryCount(day.entries), renderMoodIndicators(day.entries)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-title\",\n        children: \"Mood Colors:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-items\",\n        children: Object.entries(moodColors).filter(([mood]) => mood !== 'Unspecified').map(([mood, color]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: color\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-label\",\n            children: mood\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 17\n          }, this)]\n        }, mood, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodCalendar, \"9D4vqKBxBi7+m4NHYSeCJSFF0mk=\");\n_c = MoodCalendar;\nexport default MoodCalendar;\nvar _c;\n$RefreshReg$(_c, \"MoodCalendar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MoodCalendar","entries","moodColors","_s","calendarData","setCalendarData","currentDate","setCurrentDate","Date","currentView","setCurrentView","generateCalendarData","year","getFullYear","month","getMonth","firstDay","lastDay","firstDayIndex","getDay","daysInMonth","getDate","days","i","prevMonthLastDay","day","push","date","isCurrentMonth","dateStr","toISOString","split","dayEntries","filter","entry","remainingDays","length","goToPreviousMonth","goToNextMonth","goToToday","formatMonthYear","toLocaleDateString","getDominantMood","moodCounts","forEach","moods","Array","isArray","mood","dominantMood","maxCount","Object","count","getMoodColor","getLighterColor","hexColor","r","parseInt","slice","g","b","Math","floor","toString","padStart","renderEntryCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderMoodIndicators","allMoods","Set","add","moodList","from","map","index","style","backgroundColor","title","size","formatDate","weekday","isToday","today","onClick","moodColor","bgColor","lighterColor","borderLeft","color","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/JournalV2/src/components/MoodCalendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst MoodCalendar = ({ entries, moodColors }) => {\r\n  const [calendarData, setCalendarData] = useState([]);\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [currentView, setCurrentView] = useState('month');\r\n  \r\n  // Generate calendar data when the component mounts or entries change\r\n  useEffect(() => {\r\n    generateCalendarData();\r\n  }, [entries, currentDate, currentView]);\r\n  \r\n  // Generate the calendar grid data\r\n  const generateCalendarData = () => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    \r\n    // Get the first day of the month\r\n    const firstDay = new Date(year, month, 1);\r\n    // Get the last day of the month\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    \r\n    // Get the day of the week the first day falls on (0 = Sunday, 6 = Saturday)\r\n    const firstDayIndex = firstDay.getDay();\r\n    \r\n    // Total days in month\r\n    const daysInMonth = lastDay.getDate();\r\n    \r\n    // Total days to display (including empty cells from previous/next months)\r\n    const days = [];\r\n    \r\n    // Add empty cells for days from the previous month\r\n    for (let i = 0; i < firstDayIndex; i++) {\r\n      const prevMonthLastDay = new Date(year, month, 0).getDate();\r\n      const day = prevMonthLastDay - firstDayIndex + i + 1;\r\n      days.push({\r\n        day,\r\n        date: new Date(year, month - 1, day),\r\n        isCurrentMonth: false,\r\n        entries: []\r\n      });\r\n    }\r\n    \r\n    // Add cells for current month\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      const date = new Date(year, month, i);\r\n      const dateStr = date.toISOString().split('T')[0];\r\n      \r\n      // Find journal entries for this date\r\n      const dayEntries = entries.filter(entry => entry.date === dateStr);\r\n      \r\n      days.push({\r\n        day: i,\r\n        date,\r\n        isCurrentMonth: true,\r\n        entries: dayEntries\r\n      });\r\n    }\r\n    \r\n    // Calculate how many days from the next month need to be added\r\n    // We want a total of 42 cells (6 weeks) in the calendar\r\n    const remainingDays = 42 - days.length;\r\n    \r\n    // Add cells for the next month\r\n    for (let i = 1; i <= remainingDays; i++) {\r\n      days.push({\r\n        day: i,\r\n        date: new Date(year, month + 1, i),\r\n        isCurrentMonth: false,\r\n        entries: []\r\n      });\r\n    }\r\n    \r\n    setCalendarData(days);\r\n  };\r\n  \r\n  // Navigate to the previous month\r\n  const goToPreviousMonth = () => {\r\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));\r\n  };\r\n  \r\n  // Navigate to the next month\r\n  const goToNextMonth = () => {\r\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));\r\n  };\r\n  \r\n  // Go to today\r\n  const goToToday = () => {\r\n    setCurrentDate(new Date());\r\n  };\r\n  \r\n  // Format date as Month YYYY\r\n  const formatMonthYear = (date) => {\r\n    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\r\n  };\r\n  \r\n  // Get the dominant mood for a day (the most frequent one)\r\n  const getDominantMood = (dayEntries) => {\r\n    if (!dayEntries || dayEntries.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Count occurrences of each mood\r\n    const moodCounts = {};\r\n    \r\n    dayEntries.forEach(entry => {\r\n      // Handle both old entries with mood (string) and new entries with moods (array)\r\n      const moods = Array.isArray(entry.moods) ? entry.moods : (entry.mood ? [entry.mood] : []);\r\n      \r\n      moods.forEach(mood => {\r\n        moodCounts[mood] = (moodCounts[mood] || 0) + 1;\r\n      });\r\n    });\r\n    \r\n    // Find the mood with the highest count\r\n    let dominantMood = null;\r\n    let maxCount = 0;\r\n    \r\n    Object.entries(moodCounts).forEach(([mood, count]) => {\r\n      if (count > maxCount) {\r\n        dominantMood = mood;\r\n        maxCount = count;\r\n      }\r\n    });\r\n    \r\n    return dominantMood;\r\n  };\r\n  \r\n  // Get the mood color for a day\r\n  const getMoodColor = (dayEntries) => {\r\n    const dominantMood = getDominantMood(dayEntries);\r\n    \r\n    if (!dominantMood) {\r\n      return null;\r\n    }\r\n    \r\n    return moodColors[dominantMood] || '#bdc3c7';\r\n  };\r\n  \r\n  // Get a lighter version of a color for hover effects\r\n  const getLighterColor = (hexColor) => {\r\n    // If no color provided, return a light gray\r\n    if (!hexColor) return '#f5f5f5';\r\n    \r\n    // Convert hex to RGB\r\n    let r = parseInt(hexColor.slice(1, 3), 16);\r\n    let g = parseInt(hexColor.slice(3, 5), 16);\r\n    let b = parseInt(hexColor.slice(5, 7), 16);\r\n    \r\n    // Lighten by mixing with white\r\n    r = Math.floor(r * 0.7 + 255 * 0.3);\r\n    g = Math.floor(g * 0.7 + 255 * 0.3);\r\n    b = Math.floor(b * 0.7 + 255 * 0.3);\r\n    \r\n    // Convert back to hex\r\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n  };\r\n  \r\n  // Render entries count for a day\r\n  const renderEntryCount = (entries) => {\r\n    if (!entries || entries.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"calendar-entry-count\">{entries.length}</div>\r\n    );\r\n  };\r\n  \r\n  // Render mood indicators for a day\r\n  const renderMoodIndicators = (entries) => {\r\n    if (!entries || entries.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Get all unique moods from entries\r\n    const allMoods = new Set();\r\n    \r\n    entries.forEach(entry => {\r\n      // Handle both old entries with mood (string) and new entries with moods (array)\r\n      const moods = Array.isArray(entry.moods) ? entry.moods : (entry.mood ? [entry.mood] : []);\r\n      \r\n      moods.forEach(mood => {\r\n        allMoods.add(mood);\r\n      });\r\n    });\r\n    \r\n    const moodList = Array.from(allMoods).slice(0, 3); // Show max 3 moods\r\n    \r\n    return (\r\n      <div className=\"calendar-mood-indicators\">\r\n        {moodList.map((mood, index) => (\r\n          <div \r\n            key={index} \r\n            className=\"calendar-mood-dot\"\r\n            style={{ backgroundColor: moodColors[mood] || '#bdc3c7' }}\r\n            title={mood}\r\n          />\r\n        ))}\r\n        {allMoods.size > 3 && (\r\n          <div className=\"calendar-mood-more\">+{allMoods.size - 3}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // Format date for tooltip/aria-label\r\n  const formatDate = (date) => {\r\n    return date.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n  \r\n  // Check if a date is today\r\n  const isToday = (date) => {\r\n    const today = new Date();\r\n    return date.getDate() === today.getDate() &&\r\n      date.getMonth() === today.getMonth() &&\r\n      date.getFullYear() === today.getFullYear();\r\n  };\r\n  \r\n  return (\r\n    <div className=\"mood-calendar\">\r\n      <div className=\"calendar-header\">\r\n        <div className=\"calendar-nav\">\r\n          <button \r\n            className=\"calendar-nav-button\"\r\n            onClick={goToPreviousMonth}\r\n            aria-label=\"Previous Month\"\r\n          >\r\n            &lt;\r\n          </button>\r\n          <h3 className=\"calendar-title\">{formatMonthYear(currentDate)}</h3>\r\n          <button \r\n            className=\"calendar-nav-button\"\r\n            onClick={goToNextMonth}\r\n            aria-label=\"Next Month\"\r\n          >\r\n            &gt;\r\n          </button>\r\n        </div>\r\n        <button \r\n          className=\"today-button\"\r\n          onClick={goToToday}\r\n        >\r\n          Today\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"calendar-grid\">\r\n        <div className=\"calendar-weekdays\">\r\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => (\r\n            <div key={index} className=\"calendar-weekday\">{day}</div>\r\n          ))}\r\n        </div>\r\n        \r\n        <div className=\"calendar-days\">\r\n          {calendarData.map((day, index) => {\r\n            const moodColor = getMoodColor(day.entries);\r\n            const bgColor = day.isCurrentMonth && moodColor \r\n              ? moodColor \r\n              : (day.isCurrentMonth ? '#ffffff' : '#f5f5f5');\r\n            const lighterColor = getLighterColor(bgColor);\r\n            \r\n            return (\r\n              <div \r\n                key={index}\r\n                className={`calendar-day ${day.isCurrentMonth ? 'current-month' : 'other-month'} ${isToday(day.date) ? 'today' : ''}`}\r\n                style={{ \r\n                  backgroundColor: day.isCurrentMonth && moodColor ? lighterColor : '', \r\n                  borderLeft: day.isCurrentMonth && moodColor ? `4px solid ${moodColor}` : '',\r\n                }}\r\n                aria-label={formatDate(day.date)}\r\n              >\r\n                <div className=\"calendar-day-number\">{day.day}</div>\r\n                {renderEntryCount(day.entries)}\r\n                {renderMoodIndicators(day.entries)}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"calendar-legend\">\r\n        <div className=\"legend-title\">Mood Colors:</div>\r\n        <div className=\"legend-items\">\r\n          {Object.entries(moodColors)\r\n            .filter(([mood]) => mood !== 'Unspecified')\r\n            .map(([mood, color]) => (\r\n              <div className=\"legend-item\" key={mood}>\r\n                <div \r\n                  className=\"legend-color\" \r\n                  style={{ backgroundColor: color }}\r\n                />\r\n                <span className=\"legend-label\">{mood}</span>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoodCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}