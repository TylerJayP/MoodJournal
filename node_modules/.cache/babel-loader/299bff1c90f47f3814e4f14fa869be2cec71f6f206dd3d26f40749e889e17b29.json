{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\JournalV2\\\\src\\\\components\\\\IconSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Predefined list of icons (using emoji for simplicity)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst icons = [{\n  name: 'default',\n  emoji: '👤'\n}, {\n  name: 'smile',\n  emoji: '😊'\n}, {\n  name: 'heart',\n  emoji: '❤️'\n}, {\n  name: 'star',\n  emoji: '⭐'\n}, {\n  name: 'moon',\n  emoji: '🌙'\n}, {\n  name: 'sun',\n  emoji: '☀️'\n}, {\n  name: 'flower',\n  emoji: '🌸'\n}, {\n  name: 'tree',\n  emoji: '🌳'\n}, {\n  name: 'cat',\n  emoji: '🐱'\n}, {\n  name: 'dog',\n  emoji: '🐶'\n}, {\n  name: 'coffee',\n  emoji: '☕'\n}, {\n  name: 'book',\n  emoji: '📚'\n}, {\n  name: 'music',\n  emoji: '🎵'\n}, {\n  name: 'camera',\n  emoji: '📷'\n}, {\n  name: 'rocket',\n  emoji: '🚀'\n}, {\n  name: 'rainbow',\n  emoji: '🌈'\n}];\nconst IconSelector = ({\n  selectedIcon,\n  onSelectIcon\n}) => {\n  _s();\n  const [showSelector, setShowSelector] = useState(false);\n  const toggleSelector = () => {\n    setShowSelector(!showSelector);\n  };\n  const handleIconSelect = iconName => {\n    onSelectIcon(iconName);\n    setShowSelector(false);\n  };\n\n  // Find the currently selected icon\n  const currentIcon = icons.find(icon => icon.name === selectedIcon) || icons[0];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"icon-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"current-icon\",\n      onClick: toggleSelector,\n      \"aria-label\": \"Select profile icon\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"icon-emoji\",\n        children: currentIcon.emoji\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"change-icon-text\",\n        children: \"Change\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), showSelector && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-grid\",\n      children: icons.map(icon => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `icon-option ${selectedIcon === icon.name ? 'selected' : ''}`,\n        onClick: () => handleIconSelect(icon.name),\n        \"aria-label\": `Select ${icon.name} icon`,\n        children: icon.emoji\n      }, icon.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(IconSelector, \"9+zvtPmPDcr8HOeQiS7JfGkrpPw=\");\n_c = IconSelector;\nexport default IconSelector;\nvar _c;\n$RefreshReg$(_c, \"IconSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","icons","name","emoji","IconSelector","selectedIcon","onSelectIcon","_s","showSelector","setShowSelector","toggleSelector","handleIconSelect","iconName","currentIcon","find","icon","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/JournalV2/src/components/IconSelector.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Predefined list of icons (using emoji for simplicity)\r\nconst icons = [\r\n  { name: 'default', emoji: '👤' },\r\n  { name: 'smile', emoji: '😊' },\r\n  { name: 'heart', emoji: '❤️' },\r\n  { name: 'star', emoji: '⭐' },\r\n  { name: 'moon', emoji: '🌙' },\r\n  { name: 'sun', emoji: '☀️' },\r\n  { name: 'flower', emoji: '🌸' },\r\n  { name: 'tree', emoji: '🌳' },\r\n  { name: 'cat', emoji: '🐱' },\r\n  { name: 'dog', emoji: '🐶' },\r\n  { name: 'coffee', emoji: '☕' },\r\n  { name: 'book', emoji: '📚' },\r\n  { name: 'music', emoji: '🎵' },\r\n  { name: 'camera', emoji: '📷' },\r\n  { name: 'rocket', emoji: '🚀' },\r\n  { name: 'rainbow', emoji: '🌈' },\r\n];\r\n\r\nconst IconSelector = ({ selectedIcon, onSelectIcon }) => {\r\n  const [showSelector, setShowSelector] = useState(false);\r\n  \r\n  const toggleSelector = () => {\r\n    setShowSelector(!showSelector);\r\n  };\r\n  \r\n  const handleIconSelect = (iconName) => {\r\n    onSelectIcon(iconName);\r\n    setShowSelector(false);\r\n  };\r\n  \r\n  // Find the currently selected icon\r\n  const currentIcon = icons.find(icon => icon.name === selectedIcon) || icons[0];\r\n  \r\n  return (\r\n    <div className=\"icon-selector\">\r\n      <button \r\n        className=\"current-icon\"\r\n        onClick={toggleSelector}\r\n        aria-label=\"Select profile icon\"\r\n      >\r\n        <span className=\"icon-emoji\">{currentIcon.emoji}</span>\r\n        <span className=\"change-icon-text\">Change</span>\r\n      </button>\r\n      \r\n      {showSelector && (\r\n        <div className=\"icon-grid\">\r\n          {icons.map(icon => (\r\n            <button\r\n              key={icon.name}\r\n              className={`icon-option ${selectedIcon === icon.name ? 'selected' : ''}`}\r\n              onClick={() => handleIconSelect(icon.name)}\r\n              aria-label={`Select ${icon.name} icon`}\r\n            >\r\n              {icon.emoji}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IconSelector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}