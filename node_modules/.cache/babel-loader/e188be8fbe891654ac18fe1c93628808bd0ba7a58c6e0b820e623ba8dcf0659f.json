{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\JournalV2\\\\src\\\\components\\\\MoodCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodCalendar = ({\n  entries,\n  moodColors\n}) => {\n  _s();\n  // State for tracking the currently displayed month/year\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  // Navigate to previous month\n  const goToPreviousMonth = useCallback(() => {\n    setCurrentDate(prevDate => {\n      const newDate = new Date(prevDate);\n      newDate.setMonth(newDate.getMonth() - 1);\n      return newDate;\n    });\n  }, []);\n\n  // Navigate to next month\n  const goToNextMonth = useCallback(() => {\n    setCurrentDate(prevDate => {\n      const newDate = new Date(prevDate);\n      newDate.setMonth(newDate.getMonth() + 1);\n      return newDate;\n    });\n  }, []);\n\n  // Go to current month\n  const goToToday = useCallback(() => {\n    setCurrentDate(new Date());\n  }, []);\n\n  // Format date for display (Month YYYY)\n  const formattedMonthYear = useMemo(() => {\n    return currentDate.toLocaleDateString('en-US', {\n      month: 'long',\n      year: 'numeric'\n    });\n  }, [currentDate]);\n\n  // Generate calendar data for the current month\n  const calendarData = useMemo(() => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n\n    // Get the first day of the month\n    const firstDay = new Date(year, month, 1);\n    // Get the last day of the month\n    const lastDay = new Date(year, month + 1, 0);\n\n    // Get day of week for the first day (0 = Sunday, 6 = Saturday)\n    const firstDayOfWeek = firstDay.getDay();\n\n    // Total days in current month\n    const daysInMonth = lastDay.getDate();\n\n    // Calculate days from previous month to include\n    const daysFromPrevMonth = firstDayOfWeek;\n\n    // Calendar array to store all days\n    const calendarDays = [];\n\n    // Add days from previous month\n    if (daysFromPrevMonth > 0) {\n      const prevMonth = new Date(year, month, 0); // Last day of previous month\n      const prevMonthDays = prevMonth.getDate();\n      for (let i = prevMonthDays - daysFromPrevMonth + 1; i <= prevMonthDays; i++) {\n        const date = new Date(year, month - 1, i);\n        const dateStr = date.toISOString().split('T')[0];\n        calendarDays.push({\n          date,\n          dateStr,\n          day: i,\n          isCurrentMonth: false,\n          isPast: date < new Date(new Date().setHours(0, 0, 0, 0)),\n          isToday: false,\n          dayEntries: []\n        });\n      }\n    }\n\n    // Add days from current month\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = new Date(year, month, i);\n      const dateStr = date.toISOString().split('T')[0];\n\n      // Check if this is today\n      const isToday = date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth() && date.getDate() === today.getDate();\n      calendarDays.push({\n        date,\n        dateStr,\n        day: i,\n        isCurrentMonth: true,\n        isPast: date < today,\n        isToday,\n        dayEntries: []\n      });\n    }\n\n    // Add days from next month to complete grid (always show 6 weeks = 42 days)\n    const totalDaysNeeded = 42;\n    const daysFromNextMonth = totalDaysNeeded - calendarDays.length;\n    for (let i = 1; i <= daysFromNextMonth; i++) {\n      const date = new Date(year, month + 1, i);\n      const dateStr = date.toISOString().split('T')[0];\n      calendarDays.push({\n        date,\n        dateStr,\n        day: i,\n        isCurrentMonth: false,\n        isPast: false,\n        isToday: false,\n        dayEntries: []\n      });\n    }\n    return calendarDays;\n  }, [currentDate]);\n\n  // Add entries to the calendar days\n  const calendarWithEntries = useMemo(() => {\n    // Create a map of date strings to entries for faster lookup\n    const entriesByDate = {};\n    entries.forEach(entry => {\n      if (!entriesByDate[entry.date]) {\n        entriesByDate[entry.date] = [];\n      }\n      entriesByDate[entry.date].push(entry);\n    });\n\n    // Add entries to each calendar day\n    return calendarData.map(day => {\n      const dayEntries = entriesByDate[day.dateStr] || [];\n      return {\n        ...day,\n        dayEntries\n      };\n    });\n  }, [calendarData, entries]);\n\n  // Get the dominant mood for a day's entries\n  const getDominantMood = useCallback(dayEntries => {\n    if (!dayEntries || dayEntries.length === 0) return null;\n\n    // Count occurrences of each mood\n    const moodCounts = {};\n    let totalMoods = 0;\n    dayEntries.forEach(entry => {\n      // Handle both old entries with mood (string) and new entries with moods (array)\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : entry.mood ? [entry.mood] : [];\n      moodsArray.forEach(mood => {\n        if (!mood) return;\n        moodCounts[mood] = (moodCounts[mood] || 0) + 1;\n        totalMoods++;\n      });\n    });\n    if (totalMoods === 0) return null;\n\n    // Find the mood with highest count\n    return Object.entries(moodCounts).sort((a, b) => b[1] - a[1])[0][0];\n  }, []);\n\n  // Get a color for a day based on its dominant mood\n  const getDayColor = useCallback(dayEntries => {\n    const dominantMood = getDominantMood(dayEntries);\n    return dominantMood ? moodColors[dominantMood] || '#bdc3c7' : null;\n  }, [getDominantMood, moodColors]);\n\n  // Get a lighter version of a color for backgrounds\n  const getLighterColor = useCallback(hexColor => {\n    if (!hexColor) return 'transparent';\n\n    // Convert hex to RGB\n    const r = parseInt(hexColor.slice(1, 3), 16);\n    const g = parseInt(hexColor.slice(3, 5), 16);\n    const b = parseInt(hexColor.slice(5, 7), 16);\n\n    // Lighten by mixing with white (93% white, 7% original)\n    const lightR = Math.floor(r * 0.07 + 255 * 0.93);\n    const lightG = Math.floor(g * 0.07 + 255 * 0.93);\n    const lightB = Math.floor(b * 0.07 + 255 * 0.93);\n    return `rgba(${lightR}, ${lightG}, ${lightB}, 0.5)`;\n  }, []);\n\n  // Get all unique moods for a day\n  const getDayMoods = useCallback(dayEntries => {\n    if (!dayEntries || dayEntries.length === 0) return [];\n    const uniqueMoods = new Set();\n    dayEntries.forEach(entry => {\n      // Handle both old entries with mood (string) and new entries with moods (array)\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : entry.mood ? [entry.mood] : [];\n      moodsArray.forEach(mood => {\n        if (mood) uniqueMoods.add(mood);\n      });\n    });\n    return Array.from(uniqueMoods);\n  }, []);\n\n  // Render functions\n  const renderWeekdayNames = useMemo(() => {\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-weekday\",\n      children: day\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this));\n  }, []);\n  const renderCalendarDays = useMemo(() => {\n    return calendarWithEntries.map((day, index) => {\n      const moodColor = getDayColor(day.dayEntries);\n      const bgColor = day.isCurrentMonth ? getLighterColor(moodColor) : undefined;\n      const dayMoods = getDayMoods(day.dayEntries);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `calendar-day ${day.isCurrentMonth ? 'current-month' : 'other-month'} ${day.isToday ? 'today' : ''}`,\n        style: {\n          backgroundColor: bgColor,\n          borderLeft: day.isCurrentMonth && moodColor ? `4px solid ${moodColor}` : undefined\n        },\n        \"aria-label\": day.date.toLocaleDateString('en-US', {\n          weekday: 'long',\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-day-number\",\n          children: day.day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), day.dayEntries.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-entry-count\",\n          children: day.dayEntries.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), dayMoods.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-mood-indicators\",\n          children: [dayMoods.slice(0, 3).map((mood, moodIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-mood-dot\",\n            style: {\n              backgroundColor: moodColors[mood] || '#bdc3c7'\n            },\n            title: mood\n          }, moodIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this)), dayMoods.length > 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-mood-more\",\n            children: [\"+\", dayMoods.length - 3]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this);\n    });\n  }, [calendarWithEntries, getDayColor, getDayMoods, getLighterColor, moodColors]);\n  const renderLegend = useMemo(() => {\n    // Get all unique moods that appear in the entries\n    const uniqueMoods = new Set();\n    entries.forEach(entry => {\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : entry.mood ? [entry.mood] : [];\n      moodsArray.forEach(mood => {\n        if (mood) uniqueMoods.add(mood);\n      });\n    });\n    const moodsList = Array.from(uniqueMoods);\n\n    // If no moods, show some defaults\n    if (moodsList.length === 0) {\n      return Object.entries(moodColors).filter(([mood]) => mood !== 'Unspecified').slice(0, 8).map(([mood, color]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-label\",\n          children: mood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, mood, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this));\n    }\n\n    // Otherwise, show just the moods that appear in entries\n    return moodsList.map(mood => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-color\",\n        style: {\n          backgroundColor: moodColors[mood] || '#bdc3c7'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"legend-label\",\n        children: mood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, mood, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this));\n  }, [entries, moodColors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"calendar-nav-button\",\n          onClick: goToPreviousMonth,\n          \"aria-label\": \"Previous Month\",\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"calendar-title\",\n          children: formattedMonthYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"calendar-nav-button\",\n          onClick: goToNextMonth,\n          \"aria-label\": \"Next Month\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"today-button\",\n        onClick: goToToday,\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-weekdays\",\n        children: renderWeekdayNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-days\",\n        children: renderCalendarDays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-title\",\n        children: \"Mood Colors:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-items\",\n        children: renderLegend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodCalendar, \"4lqsIjcavttMwzcESn3IjNO7f6U=\");\n_c = MoodCalendar;\nexport default MoodCalendar;\nvar _c;\n$RefreshReg$(_c, \"MoodCalendar\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","jsxDEV","_jsxDEV","MoodCalendar","entries","moodColors","_s","currentDate","setCurrentDate","Date","goToPreviousMonth","prevDate","newDate","setMonth","getMonth","goToNextMonth","goToToday","formattedMonthYear","toLocaleDateString","month","year","calendarData","getFullYear","firstDay","lastDay","firstDayOfWeek","getDay","daysInMonth","getDate","daysFromPrevMonth","calendarDays","prevMonth","prevMonthDays","i","date","dateStr","toISOString","split","push","day","isCurrentMonth","isPast","setHours","isToday","dayEntries","today","totalDaysNeeded","daysFromNextMonth","length","calendarWithEntries","entriesByDate","forEach","entry","map","getDominantMood","moodCounts","totalMoods","moodsArray","Array","isArray","moods","mood","Object","sort","a","b","getDayColor","dominantMood","getLighterColor","hexColor","r","parseInt","slice","g","lightR","Math","floor","lightG","lightB","getDayMoods","uniqueMoods","Set","add","from","renderWeekdayNames","weekdays","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCalendarDays","moodColor","bgColor","undefined","dayMoods","style","backgroundColor","borderLeft","weekday","moodIndex","title","renderLegend","moodsList","filter","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/JournalV2/src/components/MoodCalendar.js"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\r\n\r\nconst MoodCalendar = ({ entries, moodColors }) => {\r\n  // State for tracking the currently displayed month/year\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  \r\n  // Navigate to previous month\r\n  const goToPreviousMonth = useCallback(() => {\r\n    setCurrentDate(prevDate => {\r\n      const newDate = new Date(prevDate);\r\n      newDate.setMonth(newDate.getMonth() - 1);\r\n      return newDate;\r\n    });\r\n  }, []);\r\n  \r\n  // Navigate to next month\r\n  const goToNextMonth = useCallback(() => {\r\n    setCurrentDate(prevDate => {\r\n      const newDate = new Date(prevDate);\r\n      newDate.setMonth(newDate.getMonth() + 1);\r\n      return newDate;\r\n    });\r\n  }, []);\r\n  \r\n  // Go to current month\r\n  const goToToday = useCallback(() => {\r\n    setCurrentDate(new Date());\r\n  }, []);\r\n  \r\n  // Format date for display (Month YYYY)\r\n  const formattedMonthYear = useMemo(() => {\r\n    return currentDate.toLocaleDateString('en-US', { \r\n      month: 'long', \r\n      year: 'numeric' \r\n    });\r\n  }, [currentDate]);\r\n  \r\n  // Generate calendar data for the current month\r\n  const calendarData = useMemo(() => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n    \r\n    // Get the first day of the month\r\n    const firstDay = new Date(year, month, 1);\r\n    // Get the last day of the month\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    \r\n    // Get day of week for the first day (0 = Sunday, 6 = Saturday)\r\n    const firstDayOfWeek = firstDay.getDay();\r\n    \r\n    // Total days in current month\r\n    const daysInMonth = lastDay.getDate();\r\n    \r\n    // Calculate days from previous month to include\r\n    const daysFromPrevMonth = firstDayOfWeek;\r\n    \r\n    // Calendar array to store all days\r\n    const calendarDays = [];\r\n    \r\n    // Add days from previous month\r\n    if (daysFromPrevMonth > 0) {\r\n      const prevMonth = new Date(year, month, 0); // Last day of previous month\r\n      const prevMonthDays = prevMonth.getDate();\r\n      \r\n      for (let i = prevMonthDays - daysFromPrevMonth + 1; i <= prevMonthDays; i++) {\r\n        const date = new Date(year, month - 1, i);\r\n        const dateStr = date.toISOString().split('T')[0];\r\n        \r\n        calendarDays.push({\r\n          date,\r\n          dateStr,\r\n          day: i,\r\n          isCurrentMonth: false,\r\n          isPast: date < new Date(new Date().setHours(0, 0, 0, 0)),\r\n          isToday: false,\r\n          dayEntries: []\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Add days from current month\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    \r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      const date = new Date(year, month, i);\r\n      const dateStr = date.toISOString().split('T')[0];\r\n      \r\n      // Check if this is today\r\n      const isToday = date.getFullYear() === today.getFullYear() &&\r\n                      date.getMonth() === today.getMonth() &&\r\n                      date.getDate() === today.getDate();\r\n      \r\n      calendarDays.push({\r\n        date,\r\n        dateStr,\r\n        day: i,\r\n        isCurrentMonth: true,\r\n        isPast: date < today,\r\n        isToday,\r\n        dayEntries: []\r\n      });\r\n    }\r\n    \r\n    // Add days from next month to complete grid (always show 6 weeks = 42 days)\r\n    const totalDaysNeeded = 42;\r\n    const daysFromNextMonth = totalDaysNeeded - calendarDays.length;\r\n    \r\n    for (let i = 1; i <= daysFromNextMonth; i++) {\r\n      const date = new Date(year, month + 1, i);\r\n      const dateStr = date.toISOString().split('T')[0];\r\n      \r\n      calendarDays.push({\r\n        date,\r\n        dateStr,\r\n        day: i,\r\n        isCurrentMonth: false,\r\n        isPast: false,\r\n        isToday: false,\r\n        dayEntries: []\r\n      });\r\n    }\r\n    \r\n    return calendarDays;\r\n  }, [currentDate]);\r\n  \r\n  // Add entries to the calendar days\r\n  const calendarWithEntries = useMemo(() => {\r\n    // Create a map of date strings to entries for faster lookup\r\n    const entriesByDate = {};\r\n    \r\n    entries.forEach(entry => {\r\n      if (!entriesByDate[entry.date]) {\r\n        entriesByDate[entry.date] = [];\r\n      }\r\n      entriesByDate[entry.date].push(entry);\r\n    });\r\n    \r\n    // Add entries to each calendar day\r\n    return calendarData.map(day => {\r\n      const dayEntries = entriesByDate[day.dateStr] || [];\r\n      return { ...day, dayEntries };\r\n    });\r\n  }, [calendarData, entries]);\r\n  \r\n  // Get the dominant mood for a day's entries\r\n  const getDominantMood = useCallback((dayEntries) => {\r\n    if (!dayEntries || dayEntries.length === 0) return null;\r\n    \r\n    // Count occurrences of each mood\r\n    const moodCounts = {};\r\n    let totalMoods = 0;\r\n    \r\n    dayEntries.forEach(entry => {\r\n      // Handle both old entries with mood (string) and new entries with moods (array)\r\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : (entry.mood ? [entry.mood] : []);\r\n      \r\n      moodsArray.forEach(mood => {\r\n        if (!mood) return;\r\n        moodCounts[mood] = (moodCounts[mood] || 0) + 1;\r\n        totalMoods++;\r\n      });\r\n    });\r\n    \r\n    if (totalMoods === 0) return null;\r\n    \r\n    // Find the mood with highest count\r\n    return Object.entries(moodCounts)\r\n      .sort((a, b) => b[1] - a[1])[0][0];\r\n  }, []);\r\n  \r\n  // Get a color for a day based on its dominant mood\r\n  const getDayColor = useCallback((dayEntries) => {\r\n    const dominantMood = getDominantMood(dayEntries);\r\n    return dominantMood ? moodColors[dominantMood] || '#bdc3c7' : null;\r\n  }, [getDominantMood, moodColors]);\r\n  \r\n  // Get a lighter version of a color for backgrounds\r\n  const getLighterColor = useCallback((hexColor) => {\r\n    if (!hexColor) return 'transparent';\r\n    \r\n    // Convert hex to RGB\r\n    const r = parseInt(hexColor.slice(1, 3), 16);\r\n    const g = parseInt(hexColor.slice(3, 5), 16);\r\n    const b = parseInt(hexColor.slice(5, 7), 16);\r\n    \r\n    // Lighten by mixing with white (93% white, 7% original)\r\n    const lightR = Math.floor(r * 0.07 + 255 * 0.93);\r\n    const lightG = Math.floor(g * 0.07 + 255 * 0.93);\r\n    const lightB = Math.floor(b * 0.07 + 255 * 0.93);\r\n    \r\n    return `rgba(${lightR}, ${lightG}, ${lightB}, 0.5)`;\r\n  }, []);\r\n  \r\n  // Get all unique moods for a day\r\n  const getDayMoods = useCallback((dayEntries) => {\r\n    if (!dayEntries || dayEntries.length === 0) return [];\r\n    \r\n    const uniqueMoods = new Set();\r\n    \r\n    dayEntries.forEach(entry => {\r\n      // Handle both old entries with mood (string) and new entries with moods (array)\r\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : (entry.mood ? [entry.mood] : []);\r\n      \r\n      moodsArray.forEach(mood => {\r\n        if (mood) uniqueMoods.add(mood);\r\n      });\r\n    });\r\n    \r\n    return Array.from(uniqueMoods);\r\n  }, []);\r\n  \r\n  // Render functions\r\n  const renderWeekdayNames = useMemo(() => {\r\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    return weekdays.map((day, index) => (\r\n      <div key={index} className=\"calendar-weekday\">{day}</div>\r\n    ));\r\n  }, []);\r\n  \r\n  const renderCalendarDays = useMemo(() => {\r\n    return calendarWithEntries.map((day, index) => {\r\n      const moodColor = getDayColor(day.dayEntries);\r\n      const bgColor = day.isCurrentMonth ? getLighterColor(moodColor) : undefined;\r\n      const dayMoods = getDayMoods(day.dayEntries);\r\n      \r\n      return (\r\n        <div\r\n          key={index}\r\n          className={`calendar-day ${day.isCurrentMonth ? 'current-month' : 'other-month'} ${day.isToday ? 'today' : ''}`}\r\n          style={{\r\n            backgroundColor: bgColor,\r\n            borderLeft: day.isCurrentMonth && moodColor ? `4px solid ${moodColor}` : undefined,\r\n          }}\r\n          aria-label={day.date.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\r\n        >\r\n          <div className=\"calendar-day-number\">{day.day}</div>\r\n          \r\n          {/* Entry count badge */}\r\n          {day.dayEntries.length > 0 && (\r\n            <div className=\"calendar-entry-count\">{day.dayEntries.length}</div>\r\n          )}\r\n          \r\n          {/* Mood indicators */}\r\n          {dayMoods.length > 0 && (\r\n            <div className=\"calendar-mood-indicators\">\r\n              {dayMoods.slice(0, 3).map((mood, moodIndex) => (\r\n                <div\r\n                  key={moodIndex}\r\n                  className=\"calendar-mood-dot\"\r\n                  style={{ backgroundColor: moodColors[mood] || '#bdc3c7' }}\r\n                  title={mood}\r\n                />\r\n              ))}\r\n              {dayMoods.length > 3 && (\r\n                <div className=\"calendar-mood-more\">+{dayMoods.length - 3}</div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    });\r\n  }, [calendarWithEntries, getDayColor, getDayMoods, getLighterColor, moodColors]);\r\n  \r\n  const renderLegend = useMemo(() => {\r\n    // Get all unique moods that appear in the entries\r\n    const uniqueMoods = new Set();\r\n    \r\n    entries.forEach(entry => {\r\n      const moodsArray = Array.isArray(entry.moods) ? entry.moods : (entry.mood ? [entry.mood] : []);\r\n      moodsArray.forEach(mood => {\r\n        if (mood) uniqueMoods.add(mood);\r\n      });\r\n    });\r\n    \r\n    const moodsList = Array.from(uniqueMoods);\r\n    \r\n    // If no moods, show some defaults\r\n    if (moodsList.length === 0) {\r\n      return Object.entries(moodColors)\r\n        .filter(([mood]) => mood !== 'Unspecified')\r\n        .slice(0, 8)\r\n        .map(([mood, color]) => (\r\n          <div className=\"legend-item\" key={mood}>\r\n            <div className=\"legend-color\" style={{ backgroundColor: color }} />\r\n            <span className=\"legend-label\">{mood}</span>\r\n          </div>\r\n        ));\r\n    }\r\n    \r\n    // Otherwise, show just the moods that appear in entries\r\n    return moodsList.map(mood => (\r\n      <div className=\"legend-item\" key={mood}>\r\n        <div className=\"legend-color\" style={{ backgroundColor: moodColors[mood] || '#bdc3c7' }} />\r\n        <span className=\"legend-label\">{mood}</span>\r\n      </div>\r\n    ));\r\n  }, [entries, moodColors]);\r\n  \r\n  return (\r\n    <div className=\"mood-calendar\">\r\n      <div className=\"calendar-header\">\r\n        <div className=\"calendar-nav\">\r\n          <button\r\n            className=\"calendar-nav-button\"\r\n            onClick={goToPreviousMonth}\r\n            aria-label=\"Previous Month\"\r\n          >\r\n            &lt;\r\n          </button>\r\n          <h3 className=\"calendar-title\">{formattedMonthYear}</h3>\r\n          <button\r\n            className=\"calendar-nav-button\"\r\n            onClick={goToNextMonth}\r\n            aria-label=\"Next Month\"\r\n          >\r\n            &gt;\r\n          </button>\r\n        </div>\r\n        <button\r\n          className=\"today-button\"\r\n          onClick={goToToday}\r\n        >\r\n          Today\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"calendar-grid\">\r\n        <div className=\"calendar-weekdays\">\r\n          {renderWeekdayNames}\r\n        </div>\r\n        \r\n        <div className=\"calendar-days\">\r\n          {renderCalendarDays}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"calendar-legend\">\r\n        <div className=\"legend-title\">Mood Colors:</div>\r\n        <div className=\"legend-items\">\r\n          {renderLegend}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoodCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}