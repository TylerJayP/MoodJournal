{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\JournalV2\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useJournal } from '../context/JournalContext';\nimport SuggestionGenerator from './SuggestionGenerator';\nimport AISuggestions from './AISuggestions';\nimport ResourceRecommender from './ResourceRecommender';\nimport Resources from './Resources';\nimport MoodCalendar from './MoodCalendar';\n\n// Simple visualization with SVG\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  onClose\n}) => {\n  _s();\n  const {\n    getMoodStats,\n    entries\n  } = useJournal();\n  // Get stats only once at component initialization to avoid re-renders\n  const stats = React.useMemo(() => getMoodStats(), [getMoodStats]);\n  const chartRef = useRef(null);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [suggestions, setSuggestions] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n\n  // Generate suggestions and recommendations once after initial render\n  useEffect(() => {\n    const generatedSuggestions = SuggestionGenerator.generateSuggestions(stats, entries);\n    const generatedRecommendations = ResourceRecommender.getRecommendations(stats.moodCounts, stats.totalMoodInstances);\n    console.log('Generated suggestions:', generatedSuggestions);\n    console.log('Generated recommendations:', generatedRecommendations);\n    setSuggestions(generatedSuggestions);\n    setRecommendations(generatedRecommendations);\n  }, []); // Empty dependency array to only run once\n\n  // Define mood colors (same as in MoodIcons.js)\n  const moodColors = {\n    'Happy': '#f1c40f',\n    'Excited': '#e67e22',\n    'Peaceful': '#2ecc71',\n    'Grateful': '#3498db',\n    'Loved': '#e84393',\n    'Proud': '#9b59b6',\n    'Hopeful': '#1abc9c',\n    'Content': '#27ae60',\n    'Calm': '#00cec9',\n    'Sad': '#3498db',\n    'Frustrated': '#e74c3c',\n    'Tired': '#95a5a6',\n    'Upset': '#9b59b6',\n    'Anxious': '#ff7f50',\n    'Overwhelmed': '#d35400',\n    'Depressed': '#34495e',\n    'Angry': '#c0392b',\n    'Nervous': '#fd79a8',\n    'Bored': '#636e72',\n    'Confused': '#6c5ce7',\n    'Unspecified': '#bdc3c7'\n  };\n\n  // Simple animation for statistics on tab change\n  useEffect(() => {\n    if (activeTab === 'overview') {\n      const statValues = document.querySelectorAll('.stat-value');\n      statValues.forEach((statValue, index) => {\n        // Reset animation by removing and re-adding the styles\n        statValue.style.opacity = '0';\n        statValue.style.transform = 'translateY(20px)';\n\n        // Trigger reflow to restart animation\n        void statValue.offsetWidth;\n\n        // Start animation with a slight delay for each stat card\n        setTimeout(() => {\n          statValue.style.opacity = '1';\n          statValue.style.transform = 'translateY(0)';\n        }, index * 100);\n      });\n    }\n  }, [activeTab]); // Only depend on activeTab changes\n\n  // Create a simple bar chart\n  const createChart = () => {\n    const moodCounts = stats.moodCounts;\n    const svgWidth = chartRef.current ? chartRef.current.clientWidth : 600;\n    const svgHeight = 250;\n    const barPadding = 20;\n\n    // Sort moods by count in descending order\n    const moods = Object.keys(moodCounts).sort((a, b) => moodCounts[b] - moodCounts[a]).slice(0, 10); // Show top 10 moods\n\n    const maxCount = Math.max(...Object.values(moodCounts), 1);\n    if (moods.length === 0) return /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"50%\",\n      y: \"50%\",\n      textAnchor: \"middle\",\n      children: \"No mood data yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 36\n    }, this);\n    const barWidth = (svgWidth - 60) / moods.length - barPadding;\n    return moods.map((mood, index) => {\n      const barHeight = moodCounts[mood] / maxCount * (svgHeight - 60);\n      const barX = 30 + index * (barWidth + barPadding);\n      const barY = svgHeight - barHeight - 30;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: barX,\n          y: barY,\n          width: barWidth,\n          height: barHeight,\n          fill: moodColors[mood] || '#bdc3c7',\n          rx: 4,\n          ry: 4,\n          style: {\n            transition: 'height 1s ease, y 1s ease',\n            opacity: 0.8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: barX + barWidth / 2,\n          y: svgHeight - 10,\n          textAnchor: \"middle\",\n          fill: \"#7f8c8d\",\n          fontSize: \"12\",\n          children: mood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: barX + barWidth / 2,\n          y: barY - 5,\n          textAnchor: \"middle\",\n          fill: \"#2c3e50\",\n          fontSize: \"12\",\n          fontWeight: \"bold\",\n          children: moodCounts[mood]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, mood, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Group entries by date for the history view\n  const createMoodHistory = () => {\n    // Get the last 14 days\n    const dateEntries = {};\n    const today = new Date();\n\n    // Initialize the last 14 days\n    for (let i = 13; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      dateEntries[dateStr] = [];\n    }\n\n    // Fill in the moods from stats.moodsByDate\n    stats.moodsByDate.forEach(entry => {\n      if (dateEntries[entry.date]) {\n        dateEntries[entry.date].push(entry.mood);\n      }\n    });\n\n    // Convert to array and sort by date\n    return Object.entries(dateEntries).map(([date, moods]) => ({\n      date,\n      moods\n    })).sort((a, b) => new Date(a.date) - new Date(b.date));\n  };\n  const moodHistory = createMoodHistory();\n\n  // Format date as \"MMM DD\"\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"dashboard-title\",\n        children: \"Mood Insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        className: \"dashboard-toggle\",\n        children: \"Close Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'overview' ? 'active' : ''}`,\n        onClick: () => setActiveTab('overview'),\n        children: \"Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'history' ? 'active' : ''}`,\n        onClick: () => setActiveTab('history'),\n        children: \"Mood History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'calendar' ? 'active' : ''}`,\n        onClick: () => setActiveTab('calendar'),\n        children: \"Mood Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), activeTab === 'overview' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-overview\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Total Entries\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease'\n            },\n            children: stats.totalEntries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Most Common Mood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease',\n              color: moodColors[stats.mostFrequentMood] || '#3498db'\n            },\n            children: stats.mostFrequentMood\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Unique Moods Tracked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease'\n            },\n            children: stats.uniqueMoods\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Total Mood Instances\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease'\n            },\n            children: stats.totalMoodInstances\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        ref: chartRef,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mood-distribution-title\",\n          children: \"Mood Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-distribution-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Top \", Math.min(10, Object.keys(stats.moodCounts).length), \" moods\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), \" tracked in your journal\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"250\",\n          children: createChart()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insights-section\",\n        children: /*#__PURE__*/_jsxDEV(AISuggestions, {\n          suggestions: suggestions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resources-section\",\n        children: /*#__PURE__*/_jsxDEV(Resources, {\n          recommendations: recommendations\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Mood Colors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-dots\",\n          children: Object.entries(moodColors).map(([mood, color]) => mood !== 'Unspecified' && stats.moodCounts[mood] > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-dot\",\n            style: {\n              backgroundColor: color\n            },\n            title: mood,\n            children: mood.substring(0, 1)\n          }, mood, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), activeTab === 'history' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mood-history-title\",\n        children: \"Your Mood Journey (Last 14 Days)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mood-history-carousel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-history-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-timeline\",\n            children: moodHistory.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mood-day\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mood-day-date\",\n                children: formatDate(day.date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mood-day-moods\",\n                children: day.moods.length > 0 ? day.moods.map((mood, moodIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mood-day-indicator\",\n                  style: {\n                    backgroundColor: moodColors[mood] || '#bdc3c7'\n                  },\n                  title: mood\n                }, moodIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 27\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mood-day-indicator\",\n                  style: {\n                    backgroundColor: '#f1f1f1',\n                    opacity: 0.3\n                  },\n                  title: \"No moods recorded\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mood-legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-legend-title\",\n          children: \"Common Moods:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), Object.entries(moodColors).filter(([mood]) => stats.moodCounts[mood] > 0).sort(([moodA], [moodB]) => stats.moodCounts[moodB] - stats.moodCounts[moodA]).slice(0, 10).map(([mood, color]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-legend-color\",\n            style: {\n              backgroundColor: color\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: mood\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 19\n          }, this)]\n        }, mood, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"/LLZ+Rue9bKJ3Iz953lRzHEUBmo=\", false, function () {\n  return [useJournal];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useJournal","SuggestionGenerator","AISuggestions","ResourceRecommender","Resources","MoodCalendar","jsxDEV","_jsxDEV","Dashboard","onClose","_s","getMoodStats","entries","stats","useMemo","chartRef","activeTab","setActiveTab","suggestions","setSuggestions","recommendations","setRecommendations","generatedSuggestions","generateSuggestions","generatedRecommendations","getRecommendations","moodCounts","totalMoodInstances","console","log","moodColors","statValues","document","querySelectorAll","forEach","statValue","index","style","opacity","transform","offsetWidth","setTimeout","createChart","svgWidth","current","clientWidth","svgHeight","barPadding","moods","Object","keys","sort","a","b","slice","maxCount","Math","max","values","length","x","y","textAnchor","children","fileName","_jsxFileName","lineNumber","columnNumber","barWidth","map","mood","barHeight","barX","barY","width","height","fill","rx","ry","transition","fontSize","fontWeight","createMoodHistory","dateEntries","today","Date","i","date","setDate","getDate","dateStr","toISOString","split","moodsByDate","entry","push","moodHistory","formatDate","toLocaleDateString","month","day","className","onClick","totalEntries","color","mostFrequentMood","uniqueMoods","ref","min","backgroundColor","title","substring","moodIndex","filter","moodA","moodB","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/JournalV2/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useJournal } from '../context/JournalContext';\nimport SuggestionGenerator from './SuggestionGenerator';\nimport AISuggestions from './AISuggestions';\nimport ResourceRecommender from './ResourceRecommender';\nimport Resources from './Resources';\nimport MoodCalendar from './MoodCalendar';\n\n// Simple visualization with SVG\nconst Dashboard = ({ onClose }) => {\n  const { getMoodStats, entries } = useJournal();\n  // Get stats only once at component initialization to avoid re-renders\n  const stats = React.useMemo(() => getMoodStats(), [getMoodStats]);\n  const chartRef = useRef(null);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [suggestions, setSuggestions] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  \n  // Generate suggestions and recommendations once after initial render\n  useEffect(() => {\n    const generatedSuggestions = SuggestionGenerator.generateSuggestions(stats, entries);\n    const generatedRecommendations = ResourceRecommender.getRecommendations(stats.moodCounts, stats.totalMoodInstances);\n    \n    console.log('Generated suggestions:', generatedSuggestions);\n    console.log('Generated recommendations:', generatedRecommendations);\n    \n    setSuggestions(generatedSuggestions);\n    setRecommendations(generatedRecommendations);\n  }, []); // Empty dependency array to only run once\n  \n  // Define mood colors (same as in MoodIcons.js)\n  const moodColors = {\n    'Happy': '#f1c40f',\n    'Excited': '#e67e22',\n    'Peaceful': '#2ecc71',\n    'Grateful': '#3498db',\n    'Loved': '#e84393',\n    'Proud': '#9b59b6',\n    'Hopeful': '#1abc9c',\n    'Content': '#27ae60',\n    'Calm': '#00cec9',\n    'Sad': '#3498db',\n    'Frustrated': '#e74c3c',\n    'Tired': '#95a5a6',\n    'Upset': '#9b59b6',\n    'Anxious': '#ff7f50',\n    'Overwhelmed': '#d35400',\n    'Depressed': '#34495e',\n    'Angry': '#c0392b',\n    'Nervous': '#fd79a8',\n    'Bored': '#636e72',\n    'Confused': '#6c5ce7',\n    'Unspecified': '#bdc3c7'\n  };\n  \n  // Simple animation for statistics on tab change\n  useEffect(() => {\n    if (activeTab === 'overview') {\n      const statValues = document.querySelectorAll('.stat-value');\n      statValues.forEach((statValue, index) => {\n        // Reset animation by removing and re-adding the styles\n        statValue.style.opacity = '0';\n        statValue.style.transform = 'translateY(20px)';\n        \n        // Trigger reflow to restart animation\n        void statValue.offsetWidth;\n        \n        // Start animation with a slight delay for each stat card\n        setTimeout(() => {\n          statValue.style.opacity = '1';\n          statValue.style.transform = 'translateY(0)';\n        }, index * 100);\n      });\n    }\n  }, [activeTab]); // Only depend on activeTab changes\n  \n  // Create a simple bar chart\n  const createChart = () => {\n    const moodCounts = stats.moodCounts;\n    const svgWidth = chartRef.current ? chartRef.current.clientWidth : 600;\n    const svgHeight = 250;\n    const barPadding = 20;\n    \n    // Sort moods by count in descending order\n    const moods = Object.keys(moodCounts).sort((a, b) => \n      moodCounts[b] - moodCounts[a]\n    ).slice(0, 10); // Show top 10 moods\n    \n    const maxCount = Math.max(...Object.values(moodCounts), 1);\n    \n    if (moods.length === 0) return <text x=\"50%\" y=\"50%\" textAnchor=\"middle\">No mood data yet</text>;\n    \n    const barWidth = (svgWidth - 60) / moods.length - barPadding;\n    \n    return moods.map((mood, index) => {\n      const barHeight = moodCounts[mood] / maxCount * (svgHeight - 60);\n      const barX = 30 + index * (barWidth + barPadding);\n      const barY = svgHeight - barHeight - 30;\n      \n      return (\n        <g key={mood}>\n          <rect\n            x={barX}\n            y={barY}\n            width={barWidth}\n            height={barHeight}\n            fill={moodColors[mood] || '#bdc3c7'}\n            rx={4}\n            ry={4}\n            style={{\n              transition: 'height 1s ease, y 1s ease',\n              opacity: 0.8\n            }}\n          />\n          <text\n            x={barX + barWidth / 2}\n            y={svgHeight - 10}\n            textAnchor=\"middle\"\n            fill=\"#7f8c8d\"\n            fontSize=\"12\"\n          >\n            {mood}\n          </text>\n          <text\n            x={barX + barWidth / 2}\n            y={barY - 5}\n            textAnchor=\"middle\"\n            fill=\"#2c3e50\"\n            fontSize=\"12\"\n            fontWeight=\"bold\"\n          >\n            {moodCounts[mood]}\n          </text>\n        </g>\n      );\n    });\n  };\n  \n  // Group entries by date for the history view\n  const createMoodHistory = () => {\n    // Get the last 14 days\n    const dateEntries = {};\n    const today = new Date();\n    \n    // Initialize the last 14 days\n    for (let i = 13; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      dateEntries[dateStr] = [];\n    }\n    \n    // Fill in the moods from stats.moodsByDate\n    stats.moodsByDate.forEach(entry => {\n      if (dateEntries[entry.date]) {\n        dateEntries[entry.date].push(entry.mood);\n      }\n    });\n    \n    // Convert to array and sort by date\n    return Object.entries(dateEntries)\n      .map(([date, moods]) => ({ date, moods }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date));\n  };\n  \n  const moodHistory = createMoodHistory();\n  \n  // Format date as \"MMM DD\"\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <h2 className=\"dashboard-title\">Mood Insights</h2>\n        <button onClick={onClose} className=\"dashboard-toggle\">Close Dashboard</button>\n      </div>\n      \n      <div className=\"dashboard-tabs\">\n        <button \n          className={`dashboard-tab ${activeTab === 'overview' ? 'active' : ''}`} \n          onClick={() => setActiveTab('overview')}\n        >\n          Overview\n        </button>\n        <button \n          className={`dashboard-tab ${activeTab === 'history' ? 'active' : ''}`} \n          onClick={() => setActiveTab('history')}\n        >\n          Mood History\n        </button>\n        <button \n          className={`dashboard-tab ${activeTab === 'calendar' ? 'active' : ''}`} \n          onClick={() => setActiveTab('calendar')}\n        >\n          Mood Calendar\n        </button>\n      </div>\n      \n      {activeTab === 'overview' && (\n        <div className=\"dashboard-overview\">\n          <div className=\"stats-container\">\n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Total Entries</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease' }}>\n                {stats.totalEntries}\n              </div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Most Common Mood</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease', color: moodColors[stats.mostFrequentMood] || '#3498db' }}>\n                {stats.mostFrequentMood}\n              </div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Unique Moods Tracked</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease' }}>\n                {stats.uniqueMoods}\n              </div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Total Mood Instances</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease' }}>\n                {stats.totalMoodInstances}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"chart-container\" ref={chartRef}>\n            <h3 className=\"mood-distribution-title\">Mood Distribution</h3>\n            <div className=\"mood-distribution-info\">\n              <strong>Top {Math.min(10, Object.keys(stats.moodCounts).length)} moods</strong> tracked in your journal\n            </div>\n            <svg width=\"100%\" height=\"250\">\n              {createChart()}\n            </svg>\n          </div>\n          \n          <div className=\"insights-section\">\n            <AISuggestions suggestions={suggestions} />\n          </div>\n          \n          <div className=\"resources-section\">\n            <Resources recommendations={recommendations} />\n          </div>\n          \n          <div>\n            <h3>Your Mood Colors</h3>\n            <div className=\"mood-dots\">\n              {Object.entries(moodColors).map(([mood, color]) => (\n                mood !== 'Unspecified' && stats.moodCounts[mood] > 0 && (\n                  <div \n                    key={mood}\n                    className=\"mood-dot\"\n                    style={{ backgroundColor: color }}\n                    title={mood}\n                  >\n                    {mood.substring(0, 1)}\n                  </div>\n                )\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {activeTab === 'history' && (\n        <div className=\"dashboard-history\">\n          <h3 className=\"mood-history-title\">Your Mood Journey (Last 14 Days)</h3>\n          \n          <div className=\"mood-history-carousel\">\n            <div className=\"mood-history-wrapper\">\n              <div className=\"mood-timeline\">\n                {moodHistory.map((day, index) => (\n                  <div className=\"mood-day\" key={index}>\n                    <div className=\"mood-day-date\">{formatDate(day.date)}</div>\n                    <div className=\"mood-day-moods\">\n                      {day.moods.length > 0 ? (\n                        day.moods.map((mood, moodIndex) => (\n                          <div \n                            key={moodIndex}\n                            className=\"mood-day-indicator\"\n                            style={{ backgroundColor: moodColors[mood] || '#bdc3c7' }}\n                            title={mood}\n                          />\n                        ))\n                      ) : (\n                        <div \n                          className=\"mood-day-indicator\"\n                          style={{ backgroundColor: '#f1f1f1', opacity: 0.3 }}\n                          title=\"No moods recorded\"\n                        />\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mood-legend\">\n            <div className=\"mood-legend-title\">Common Moods:</div>\n            {Object.entries(moodColors)\n              .filter(([mood]) => stats.moodCounts[mood] > 0)\n              .sort(([moodA], [moodB]) => stats.moodCounts[moodB] - stats.moodCounts[moodA])\n              .slice(0, 10)\n              .map(([mood, color]) => (\n                <div className=\"mood-legend-item\" key={mood}>\n                  <div \n                    className=\"mood-legend-color\" \n                    style={{ backgroundColor: color }}\n                  />\n                  <span>{mood}</span>\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}