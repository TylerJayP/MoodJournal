{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tyler\\\\OneDrive\\\\Desktop\\\\JournalV2\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useJournal } from '../context/JournalContext';\n\n// Simple visualization with SVG\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  onClose\n}) => {\n  _s();\n  const {\n    getMoodStats\n  } = useJournal();\n  const stats = getMoodStats();\n  const chartRef = useRef(null);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Define mood colors (same as in MoodIcons.js)\n  const moodColors = {\n    'Happy': '#f1c40f',\n    'Excited': '#e67e22',\n    'Peaceful': '#2ecc71',\n    'Grateful': '#3498db',\n    'Loved': '#e84393',\n    'Proud': '#9b59b6',\n    'Hopeful': '#1abc9c',\n    'Content': '#27ae60',\n    'Calm': '#00cec9',\n    'Sad': '#3498db',\n    'Frustrated': '#e74c3c',\n    'Tired': '#95a5a6',\n    'Upset': '#9b59b6',\n    'Anxious': '#ff7f50',\n    'Overwhelmed': '#d35400',\n    'Depressed': '#34495e',\n    'Angry': '#c0392b',\n    'Nervous': '#fd79a8',\n    'Bored': '#636e72',\n    'Confused': '#6c5ce7',\n    'Unspecified': '#bdc3c7'\n  };\n\n  // Simple animation for statistics on mount\n  useEffect(() => {\n    const statValues = document.querySelectorAll('.stat-value');\n    statValues.forEach((statValue, index) => {\n      setTimeout(() => {\n        statValue.style.opacity = '1';\n        statValue.style.transform = 'translateY(0)';\n      }, index * 100);\n    });\n  }, []);\n\n  // Create a simple bar chart\n  const createChart = () => {\n    const moodCounts = stats.moodCounts;\n    const svgWidth = chartRef.current ? chartRef.current.clientWidth : 600;\n    const svgHeight = 250;\n    const barPadding = 20;\n\n    // Sort moods by count in descending order\n    const moods = Object.keys(moodCounts).sort((a, b) => moodCounts[b] - moodCounts[a]).slice(0, 10); // Show top 10 moods\n\n    const maxCount = Math.max(...Object.values(moodCounts), 1);\n    if (moods.length === 0) return /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"50%\",\n      y: \"50%\",\n      textAnchor: \"middle\",\n      children: \"No mood data yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 36\n    }, this);\n    const barWidth = (svgWidth - 60) / moods.length - barPadding;\n    return moods.map((mood, index) => {\n      const barHeight = moodCounts[mood] / maxCount * (svgHeight - 60);\n      const barX = 30 + index * (barWidth + barPadding);\n      const barY = svgHeight - barHeight - 30;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: barX,\n          y: barY,\n          width: barWidth,\n          height: barHeight,\n          fill: moodColors[mood] || '#bdc3c7',\n          rx: 4,\n          ry: 4,\n          style: {\n            transition: 'height 1s ease, y 1s ease',\n            opacity: 0.8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: barX + barWidth / 2,\n          y: svgHeight - 10,\n          textAnchor: \"middle\",\n          fill: \"#7f8c8d\",\n          fontSize: \"12\",\n          children: mood\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: barX + barWidth / 2,\n          y: barY - 5,\n          textAnchor: \"middle\",\n          fill: \"#2c3e50\",\n          fontSize: \"12\",\n          fontWeight: \"bold\",\n          children: moodCounts[mood]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, mood, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Group entries by date for the history view\n  const createMoodHistory = () => {\n    // Get the last 14 days\n    const dateEntries = {};\n    const today = new Date();\n\n    // Initialize the last 14 days\n    for (let i = 13; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      dateEntries[dateStr] = [];\n    }\n\n    // Fill in the moods from stats.moodsByDate\n    stats.moodsByDate.forEach(entry => {\n      if (dateEntries[entry.date]) {\n        dateEntries[entry.date].push(entry.mood);\n      }\n    });\n\n    // Convert to array and sort by date\n    return Object.entries(dateEntries).map(([date, moods]) => ({\n      date,\n      moods\n    })).sort((a, b) => new Date(a.date) - new Date(b.date));\n  };\n  const moodHistory = createMoodHistory();\n\n  // Format date as \"MMM DD\"\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"dashboard-title\",\n        children: \"Mood Insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        className: \"dashboard-toggle\",\n        children: \"Close Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'overview' ? 'active' : ''}`,\n        onClick: () => setActiveTab('overview'),\n        children: \"Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'history' ? 'active' : ''}`,\n        onClick: () => setActiveTab('history'),\n        children: \"Mood History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), activeTab === 'overview' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-overview\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Total Entries\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease'\n            },\n            children: stats.totalEntries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Most Common Mood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease',\n              color: moodColors[stats.mostFrequentMood] || '#3498db'\n            },\n            children: stats.mostFrequentMood\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Unique Moods Tracked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease'\n            },\n            children: stats.uniqueMoods\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Total Mood Instances\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            style: {\n              opacity: 0,\n              transform: 'translateY(20px)',\n              transition: 'opacity 0.5s ease, transform 0.5s ease'\n            },\n            children: stats.totalMoodInstances\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        ref: chartRef,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mood-distribution-title\",\n          children: \"Mood Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-distribution-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Top \", Math.min(10, Object.keys(stats.moodCounts).length), \" moods\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), \" tracked in your journal\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"100%\",\n          height: \"250\",\n          children: createChart()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Mood Colors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-dots\",\n          children: Object.entries(moodColors).map(([mood, color]) => mood !== 'Unspecified' && stats.moodCounts[mood] > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-dot\",\n            style: {\n              backgroundColor: color\n            },\n            title: mood,\n            children: mood.substring(0, 1)\n          }, mood, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), activeTab === 'history' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mood-history-title\",\n        children: \"Your Mood Journey (Last 14 Days)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mood-history-carousel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-history-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-timeline\",\n            children: moodHistory.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mood-day\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mood-day-date\",\n                children: formatDate(day.date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mood-day-moods\",\n                children: day.moods.length > 0 ? day.moods.map((mood, moodIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mood-day-indicator\",\n                  style: {\n                    backgroundColor: moodColors[mood] || '#bdc3c7'\n                  },\n                  title: mood\n                }, moodIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 27\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mood-day-indicator\",\n                  style: {\n                    backgroundColor: '#f1f1f1',\n                    opacity: 0.3\n                  },\n                  title: \"No moods recorded\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mood-legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-legend-title\",\n          children: \"Common Moods:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), Object.entries(moodColors).filter(([mood]) => stats.moodCounts[mood] > 0).sort(([moodA], [moodB]) => stats.moodCounts[moodB] - stats.moodCounts[moodA]).slice(0, 10).map(([mood, color]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mood-legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mood-legend-color\",\n            style: {\n              backgroundColor: color\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: mood\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 19\n          }, this)]\n        }, mood, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"zjX8A+GkolYqyCo6TnuSMs5gZe8=\", false, function () {\n  return [useJournal];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useJournal","jsxDEV","_jsxDEV","Dashboard","onClose","_s","getMoodStats","stats","chartRef","activeTab","setActiveTab","moodColors","statValues","document","querySelectorAll","forEach","statValue","index","setTimeout","style","opacity","transform","createChart","moodCounts","svgWidth","current","clientWidth","svgHeight","barPadding","moods","Object","keys","sort","a","b","slice","maxCount","Math","max","values","length","x","y","textAnchor","children","fileName","_jsxFileName","lineNumber","columnNumber","barWidth","map","mood","barHeight","barX","barY","width","height","fill","rx","ry","transition","fontSize","fontWeight","createMoodHistory","dateEntries","today","Date","i","date","setDate","getDate","dateStr","toISOString","split","moodsByDate","entry","push","entries","moodHistory","formatDate","toLocaleDateString","month","day","className","onClick","totalEntries","color","mostFrequentMood","uniqueMoods","totalMoodInstances","ref","min","backgroundColor","title","substring","moodIndex","filter","moodA","moodB","_c","$RefreshReg$"],"sources":["C:/Users/tyler/OneDrive/Desktop/JournalV2/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useJournal } from '../context/JournalContext';\n\n// Simple visualization with SVG\nconst Dashboard = ({ onClose }) => {\n  const { getMoodStats } = useJournal();\n  const stats = getMoodStats();\n  const chartRef = useRef(null);\n  const [activeTab, setActiveTab] = useState('overview');\n  \n  // Define mood colors (same as in MoodIcons.js)\n  const moodColors = {\n    'Happy': '#f1c40f',\n    'Excited': '#e67e22',\n    'Peaceful': '#2ecc71',\n    'Grateful': '#3498db',\n    'Loved': '#e84393',\n    'Proud': '#9b59b6',\n    'Hopeful': '#1abc9c',\n    'Content': '#27ae60',\n    'Calm': '#00cec9',\n    'Sad': '#3498db',\n    'Frustrated': '#e74c3c',\n    'Tired': '#95a5a6',\n    'Upset': '#9b59b6',\n    'Anxious': '#ff7f50',\n    'Overwhelmed': '#d35400',\n    'Depressed': '#34495e',\n    'Angry': '#c0392b',\n    'Nervous': '#fd79a8',\n    'Bored': '#636e72',\n    'Confused': '#6c5ce7',\n    'Unspecified': '#bdc3c7'\n  };\n  \n  // Simple animation for statistics on mount\n  useEffect(() => {\n    const statValues = document.querySelectorAll('.stat-value');\n    statValues.forEach((statValue, index) => {\n      setTimeout(() => {\n        statValue.style.opacity = '1';\n        statValue.style.transform = 'translateY(0)';\n      }, index * 100);\n    });\n  }, []);\n  \n  // Create a simple bar chart\n  const createChart = () => {\n    const moodCounts = stats.moodCounts;\n    const svgWidth = chartRef.current ? chartRef.current.clientWidth : 600;\n    const svgHeight = 250;\n    const barPadding = 20;\n    \n    // Sort moods by count in descending order\n    const moods = Object.keys(moodCounts).sort((a, b) => \n      moodCounts[b] - moodCounts[a]\n    ).slice(0, 10); // Show top 10 moods\n    \n    const maxCount = Math.max(...Object.values(moodCounts), 1);\n    \n    if (moods.length === 0) return <text x=\"50%\" y=\"50%\" textAnchor=\"middle\">No mood data yet</text>;\n    \n    const barWidth = (svgWidth - 60) / moods.length - barPadding;\n    \n    return moods.map((mood, index) => {\n      const barHeight = moodCounts[mood] / maxCount * (svgHeight - 60);\n      const barX = 30 + index * (barWidth + barPadding);\n      const barY = svgHeight - barHeight - 30;\n      \n      return (\n        <g key={mood}>\n          <rect\n            x={barX}\n            y={barY}\n            width={barWidth}\n            height={barHeight}\n            fill={moodColors[mood] || '#bdc3c7'}\n            rx={4}\n            ry={4}\n            style={{\n              transition: 'height 1s ease, y 1s ease',\n              opacity: 0.8\n            }}\n          />\n          <text\n            x={barX + barWidth / 2}\n            y={svgHeight - 10}\n            textAnchor=\"middle\"\n            fill=\"#7f8c8d\"\n            fontSize=\"12\"\n          >\n            {mood}\n          </text>\n          <text\n            x={barX + barWidth / 2}\n            y={barY - 5}\n            textAnchor=\"middle\"\n            fill=\"#2c3e50\"\n            fontSize=\"12\"\n            fontWeight=\"bold\"\n          >\n            {moodCounts[mood]}\n          </text>\n        </g>\n      );\n    });\n  };\n  \n  // Group entries by date for the history view\n  const createMoodHistory = () => {\n    // Get the last 14 days\n    const dateEntries = {};\n    const today = new Date();\n    \n    // Initialize the last 14 days\n    for (let i = 13; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      dateEntries[dateStr] = [];\n    }\n    \n    // Fill in the moods from stats.moodsByDate\n    stats.moodsByDate.forEach(entry => {\n      if (dateEntries[entry.date]) {\n        dateEntries[entry.date].push(entry.mood);\n      }\n    });\n    \n    // Convert to array and sort by date\n    return Object.entries(dateEntries)\n      .map(([date, moods]) => ({ date, moods }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date));\n  };\n  \n  const moodHistory = createMoodHistory();\n  \n  // Format date as \"MMM DD\"\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <h2 className=\"dashboard-title\">Mood Insights</h2>\n        <button onClick={onClose} className=\"dashboard-toggle\">Close Dashboard</button>\n      </div>\n      \n      <div className=\"dashboard-tabs\">\n        <button \n          className={`dashboard-tab ${activeTab === 'overview' ? 'active' : ''}`} \n          onClick={() => setActiveTab('overview')}\n        >\n          Overview\n        </button>\n        <button \n          className={`dashboard-tab ${activeTab === 'history' ? 'active' : ''}`} \n          onClick={() => setActiveTab('history')}\n        >\n          Mood History\n        </button>\n      </div>\n      \n      {activeTab === 'overview' && (\n        <div className=\"dashboard-overview\">\n          <div className=\"stats-container\">\n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Total Entries</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease' }}>\n                {stats.totalEntries}\n              </div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Most Common Mood</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease', color: moodColors[stats.mostFrequentMood] || '#3498db' }}>\n                {stats.mostFrequentMood}\n              </div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Unique Moods Tracked</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease' }}>\n                {stats.uniqueMoods}\n              </div>\n            </div>\n            \n            <div className=\"stat-card\">\n              <div className=\"stat-label\">Total Mood Instances</div>\n              <div className=\"stat-value\" style={{ opacity: 0, transform: 'translateY(20px)', transition: 'opacity 0.5s ease, transform 0.5s ease' }}>\n                {stats.totalMoodInstances}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"chart-container\" ref={chartRef}>\n            <h3 className=\"mood-distribution-title\">Mood Distribution</h3>\n            <div className=\"mood-distribution-info\">\n              <strong>Top {Math.min(10, Object.keys(stats.moodCounts).length)} moods</strong> tracked in your journal\n            </div>\n            <svg width=\"100%\" height=\"250\">\n              {createChart()}\n            </svg>\n          </div>\n          \n          <div>\n            <h3>Your Mood Colors</h3>\n            <div className=\"mood-dots\">\n              {Object.entries(moodColors).map(([mood, color]) => (\n                mood !== 'Unspecified' && stats.moodCounts[mood] > 0 && (\n                  <div \n                    key={mood}\n                    className=\"mood-dot\"\n                    style={{ backgroundColor: color }}\n                    title={mood}\n                  >\n                    {mood.substring(0, 1)}\n                  </div>\n                )\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {activeTab === 'history' && (\n        <div className=\"dashboard-history\">\n          <h3 className=\"mood-history-title\">Your Mood Journey (Last 14 Days)</h3>\n          \n          <div className=\"mood-history-carousel\">\n            <div className=\"mood-history-wrapper\">\n              <div className=\"mood-timeline\">\n                {moodHistory.map((day, index) => (\n                  <div className=\"mood-day\" key={index}>\n                    <div className=\"mood-day-date\">{formatDate(day.date)}</div>\n                    <div className=\"mood-day-moods\">\n                      {day.moods.length > 0 ? (\n                        day.moods.map((mood, moodIndex) => (\n                          <div \n                            key={moodIndex}\n                            className=\"mood-day-indicator\"\n                            style={{ backgroundColor: moodColors[mood] || '#bdc3c7' }}\n                            title={mood}\n                          />\n                        ))\n                      ) : (\n                        <div \n                          className=\"mood-day-indicator\"\n                          style={{ backgroundColor: '#f1f1f1', opacity: 0.3 }}\n                          title=\"No moods recorded\"\n                        />\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mood-legend\">\n            <div className=\"mood-legend-title\">Common Moods:</div>\n            {Object.entries(moodColors)\n              .filter(([mood]) => stats.moodCounts[mood] > 0)\n              .sort(([moodA], [moodB]) => stats.moodCounts[moodB] - stats.moodCounts[moodA])\n              .slice(0, 10)\n              .map(([mood, color]) => (\n                <div className=\"mood-legend-item\" key={mood}>\n                  <div \n                    className=\"mood-legend-color\" \n                    style={{ backgroundColor: color }}\n                  />\n                  <span>{mood}</span>\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}